name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Display repository structure
      run: |
        echo "Repository contents:"
        ls -la
        echo "Looking for package.json:"
        find . -name "package.json" -type f

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Ensure the host key is added to known_hosts
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        echo "SSH key setup complete."
        # Verify key fingerprint (optional but good practice)
        ssh-keygen -lf ~/.ssh/id_rsa

    - name: Test SSH Connection
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        echo "Attempting SSH connection test to $EC2_USER@$EC2_HOST..."
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 -vvv $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"

    - name: Transfer files and deploy on EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Create a temporary directory for deployment files
        echo "Creating deployment package..."
        DEPLOY_DIR="deploy_$(date +%s)"
        mkdir -p $DEPLOY_DIR
        # Copy all files (including hidden ones)
        cp -R * $DEPLOY_DIR/ 2>/dev/null || :
        cp -R .* $DEPLOY_DIR/ 2>/dev/null || :
        echo "Package created in $DEPLOY_DIR"
        ls -la $DEPLOY_DIR

        # Define rsync SSH options with verbose logging
        SSH_OPTS="-i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 -vvv"

        # Transfer to EC2 - use rsync with simplified -e and explicit destination
        echo "Transferring files to EC2 using rsync..."
        REMOTE_DEST="/home/${EC2_USER}/seller-service/"
        echo "Remote Destination: $REMOTE_DEST"
        echo "Running rsync command..."
        rsync -avz --delete --exclude='.git' --exclude='.github' -e "ssh ${SSH_OPTS}" "$DEPLOY_DIR/" "${EC2_USER}@${EC2_HOST}:${REMOTE_DEST}"

        # Execute deployment on EC2
        echo "Running deployment on EC2..."
        ssh ${SSH_OPTS} $EC2_USER@$EC2_HOST 'bash -s' << 'ENDSSH'
          set -e # Exit immediately if a command exits with a non-zero status.
          cd /home/$EC2_USER/seller-service
          echo "Current directory on EC2: $(pwd)"
          echo "Contents on EC2:"
          ls -la

          # Find package.json (might be in a subdirectory)
          PACKAGE_JSON=$(find . -maxdepth 3 -name "package.json" -type f | head -1)
          if [ -z "$PACKAGE_JSON" ]; then
            echo "Could not find package.json file on EC2!"
            find . -maxdepth 3 -type f | sort
            exit 1
          fi

          # Change to the directory containing package.json
          PKG_DIR=$(dirname "$PACKAGE_JSON")
          echo "Found package.json in EC2 directory: $PKG_DIR"
          cd "$PKG_DIR"

          # Set up Node.js environment
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20 || nvm install 20

          # Install dependencies and start/restart the service
          echo "Running npm install on EC2..."
          npm install
          echo "Generating Prisma client on EC2..."
          npx prisma generate
          echo "Restarting/starting PM2 service..."
          pm2 restart seller-service || pm2 start src/server.js --name seller-service

          echo "Deployment completed successfully on EC2!"
        ENDSSH