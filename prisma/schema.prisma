generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Address {
  id        String   @id
  userId    String
  name      String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String
  pincode   String
  country   String   @default("India")
  isDefault Boolean  @default(false)
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime
  orders    Order[]
}

model AdminRefreshToken {
  id        String   @id
  token     String   @unique
  adminId   String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model CartItem {
  id        String   @id
  cartId    String
  productId String
  quantity  Int      @default(1)
  size      String
  color     String?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model ColorInventory {
  id          String   @id
  productId   String
  color       String
  inventory   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  colorCode   String   @default("")
  stockNumber String?
  product     Product  @relation(fields: [productId], references: [id], map: "ColorInventory_productId_product_fkey")

  @@unique([productId, color])
}

model OTP {
  id          String   @id
  phoneNumber String
  otpCode     String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  verified    Boolean  @default(false)

  @@index([phoneNumber])
}

model Order {
  id                String               @id @default(uuid())
  orderNumber       String               @unique
  userId            String
  totalAmount       Float
  status            OrderStatus          @default(PENDING)
  paymentStatus     PaymentStatus        @default(PENDING)
  paymentMethod     PaymentMethod        @default(COD)
  addressId         String?
  discount          Float                @default(0)
  shippingFee       Float                @default(0)
  tax               Float                @default(0)
  notes             String?
  deliveryNotes     String?
  estimatedDelivery DateTime?
  trackingNumber    String?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  sellerPhone       String?
  adminNotified     Boolean?             @default(false)
  customerNotified  Boolean?             @default(false)
  primarySellerId   String?
  adminProcessed    Boolean?             @default(false)
  adminNotes        String?
  sellerConfirmed   Boolean?             @default(false)
  shippingAddress   Json?
  address           Address?             @relation(fields: [addressId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])
  items             OrderItem[]
  transactions      PaymentTransaction[]
  primarySeller     Seller?              @relation("SellerOrders", fields: [primarySellerId], references: [id])
  returnRequests    ReturnRequest[]

  @@index([createdAt])
  @@index([primarySellerId])
  @@index([status, paymentStatus])
  @@index([userId, status])
  @@index([adminProcessed])
}

model OrderItem {
  id                 String              @id
  orderId            String
  productId          String?
  productName        String
  sellerId           String
  quantity           Int
  size               String
  color              String?
  price              Float
  discount           Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  returnWindowEnd    DateTime?
  returnWindowStart  DateTime?
  returnedAt         DateTime?
  earningsCredited   Boolean             @default(false)
  earningsCreditedAt DateTime?
  returnWindowStatus ReturnWindowStatus?
  isReturnable       Boolean             @default(false)
  product            Product?            @relation(fields: [productId], references: [id])
  order              Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  seller             Seller              @relation(fields: [sellerId], references: [id])
  returnRequest      ReturnRequest?
  earnings           SellerEarning[]

  @@index([orderId])
  @@index([productId])
  @@index([sellerId])
  @@index([returnWindowStatus])
  @@index([earningsCredited])
}

model PaymentTransaction {
  id                String        @id
  userId            String
  orderId           String?
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus
  paymentMethod     PaymentMethod
  transactionId     String?       @unique
  gatewayResponse   Json?
  paymentLink       String?
  paymentLinkExpiry DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  order             Order?        @relation(fields: [orderId], references: [id])
}

model Product {
  id             String           @id
  name           String
  description    String?
  mrpPrice       Float
  sellingPrice   Float
  images         String[]         @default([])
  category       String?
  subcategory    String?
  sizeQuantities Json
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  sellerId       String
  variantGroupId String?
  isReturnable   Boolean          @default(true)
  seller         Seller           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  colorInventory ColorInventory[]
  orderItems     OrderItem[]

  @@index([isActive, sellerId], map: "idx_product_active_seller")
  @@index([category, subcategory])
  @@index([createdAt])
  @@index([sellerId, isActive])
}

model ProductVariantGroup {
  id           String   @id
  name         String
  description  String?
  category     String?
  subcategory  String?
  basePrice    Float
  sellingPrice Float
  sellerId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  sellerId  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([token])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Seller {
  id                    String                    @id @default(cuid())
  phone                 String                    @unique
  password              String?
  shopName              String?
  ownerName             String?
  address               String?
  city                  String?
  state                 String?
  pincode               String?
  openTime              String?
  closeTime             String?
  categories            String[]                  @default([])
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @default(now()) @updatedAt
  latitude              Float?
  longitude             Float?
  isPhoneVerified       Boolean                   @default(false)
  gstNumber             String?
  isVisible             Boolean                   @default(true)
  manuallyHidden        Boolean                   @default(false)
  location              Unsupported("geography")?
  bankAccountName       String?
  bankName              String?
  accountNumber         String?
  ifsc                  String?
  gupshupOtpPending     Boolean?                  @default(false)
  cashfreeBeneficiaryId String?                   @unique
  balance               Float                     @default(0)
  payoutsEnabled        Boolean                   @default(false)
  timeZone              String?                   @default("Asia/Kolkata") @db.VarChar(100)
  products              Product[]
  orderItems            OrderItem[]
  orders                Order[]                   @relation("SellerOrders")
  withdrawals           Withdrawal[]
  earnings              SellerEarning[]
  payouts               Payout[]

  @@index([manuallyHidden], map: "idx_seller_manually_hidden")
  @@index([isVisible], map: "idx_seller_visibility")
  @@index([location], type: Gist)
  @@index([accountNumber, ifsc], map: "idx_seller_bank_details")
}

model SuperAdmin {
  id        String   @id
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model User {
  id                 String          @id @default(dbgenerated("gen_random_uuid()"))
  email              String?         @unique
  phone              String?         @unique
  password           String
  name               String?
  profilePicture     String?
  isVerified         Boolean         @default(false)
  verificationToken  String?
  passwordResetToken String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  isPhoneVerified    Boolean         @default(false)
  lastLoginAt        DateTime?
  role               UserRole        @default(USER)
  tokenVersion       Int             @default(0)
  orders             Order[]
  returnRequests     ReturnRequest[]
}

model UserRefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model WhatsAppOTP {
  id          String   @id @default(cuid())
  phoneNumber String
  otpCode     String
  verified    Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  email       String?
  isNewUser   Boolean? @default(false)

  @@index([phoneNumber, expiresAt])
}

model PushSubscription {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  endpoint  String   @unique
  p256dh    String
  auth      String
  sellerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([sellerId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Payout {
  id               String       @id
  sellerId         String
  amount           Float
  status           PayoutStatus @default(PENDING)
  cashfreePayoutId String?      @unique
  requestedAt      DateTime     @default(now())
  processedAt      DateTime?
  paymentDetails   Json?
  paymentMethod    PayoutMethod @default(BANK_TRANSFER)
  remarks          String?
  seller           Seller       @relation(fields: [sellerId], references: [id])

  @@index([requestedAt])
  @@index([sellerId])
  @@index([status])
  @@index([paymentMethod])
}

model SiteSettings {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model ReturnRequest {
  id          String    @id @default(cuid())
  orderId     String
  orderItemId String    @unique
  userId      String
  reason      String?
  status      String
  productName String?
  amount      Float?
  submittedAt DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
}

model Withdrawal {
  id                 String           @id @default(cuid())
  sellerId           String
  amount             Float
  currency           String           @default("INR")
  status             WithdrawalStatus @default(PENDING)
  gatewayTransferId  String?
  gatewayReferenceId String?
  processedAt        DateTime?        @db.Timestamptz(3)
  failedReason       String?
  createdAt          DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(3)
  paymentMethod      String?
  paymentDetails     Json?
  remarks            String?
  completedAt        DateTime?        @db.Timestamptz(3)
  utr                String?
  webhookData        Json?
  seller             Seller           @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "idx_withdrawal_created_at")
  @@index([gatewayReferenceId], map: "idx_withdrawal_gateway_reference_id")
  @@index([gatewayTransferId], map: "idx_withdrawal_gateway_transfer_id")
  @@index([sellerId], map: "idx_withdrawal_seller_id")
  @@index([status], map: "idx_withdrawal_status")
  @@index([utr], map: "idx_withdrawal_utr")
}

model SellerEarning {
  id                String      @id @default(cuid())
  sellerId          String
  orderItemId       String
  amount            Float
  commission        Float       @default(0)
  type              EarningType
  status            String      @default("PENDING")
  creditedToBalance Boolean     @default(false)
  creditedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  grossAmount       Float       @default(0)
  seller            Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItem         OrderItem   @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([orderItemId])
  @@index([type])
  @@index([status])
  @@index([creditedToBalance])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  ACCEPTED
  REJECTED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum ProductCategory {
  MEN
  WOMEN
  KIDS
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PayoutStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ReturnWindowStatus {
  NOT_APPLICABLE
  ACTIVE
  COMPLETED
  RETURNED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum EarningType {
  IMMEDIATE
  POST_RETURN_WINDOW
}

enum PayoutMethod {
  BANK_TRANSFER
  UPI
  WALLET
  CARD
}
