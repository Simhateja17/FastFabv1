generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Seller {
  id              String         @id @default(uuid())
  phone           String         @unique
  password        String?
  shopName        String?
  ownerName       String?
  address         String?
  city            String?
  state           String?
  pincode         String?
  openTime        String?
  closeTime       String?
  categories      String[]       @default([])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  latitude        Float?
  longitude       Float?
  isPhoneVerified Boolean        @default(false)
  gstNumber       String?
  products        Product[]
  refreshTokens   RefreshToken[]
}

model SuperAdmin {
  id          String              @id @default(uuid())
  email       String              @unique
  password    String
  name        String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  adminTokens AdminRefreshToken[]
}

model AdminRefreshToken {
  id         String     @id @default(uuid())
  token      String     @unique
  adminId    String
  expiresAt  DateTime
  createdAt  DateTime   @default(now())
  superAdmin SuperAdmin @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  sellerId  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Product {
  id             String           @id @default(uuid())
  name           String
  description    String?
  mrpPrice       Float
  sellingPrice   Float
  images         String[]         @default([])
  category       String?
  subcategory    String?
  sizeQuantities Json
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sellerId       String
  seller         Seller           @relation(fields: [sellerId], references: [id])
  colorInventory ColorInventory[]
}

model ColorInventory {
  id        String   @id @default(uuid())
  productId String
  color     String
  inventory Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  colorCode String   @default("")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, color])
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  phone              String?              @unique
  password           String
  name               String?
  profilePicture     String?
  isVerified         Boolean              @default(false)
  verificationToken  String?
  passwordResetToken String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isPhoneVerified    Boolean              @default(false)
  lastLoginAt        DateTime?
  role               UserRole             @default(USER)
  tokenVersion       Int                  @default(0)
  addresses          Address[]
  orders             Order[]
  carts              Cart[]
  refreshTokens      UserRefreshToken[]
  payments           PaymentTransaction[]
}

model UserRefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  name      String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String
  pincode   String
  country   String   @default("India")
  isDefault Boolean  @default(false)
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  size      String
  color     String?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id                String               @id @default(uuid())
  orderNumber       String               @unique
  userId            String
  totalAmount       Float
  status            OrderStatus          @default(PENDING)
  paymentStatus     PaymentStatus        @default(PENDING)
  paymentMethod     PaymentMethod        @default(COD)
  addressId         String?
  discount          Float                @default(0)
  shippingFee       Float                @default(0)
  tax               Float                @default(0)
  notes             String?
  deliveryNotes     String?
  estimatedDelivery DateTime?
  trackingNumber    String?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  user              User                 @relation(fields: [userId], references: [id])
  items             OrderItem[]
  shippingAddress   Address?             @relation(fields: [addressId], references: [id])
  transactions      PaymentTransaction[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  productName String
  sellerId    String
  quantity    Int
  size        String
  color       String?
  price       Float
  discount    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PaymentTransaction {
  id                String        @id @default(uuid())
  userId            String
  orderId           String?
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus
  paymentMethod     PaymentMethod
  transactionId     String?       @unique
  gatewayResponse   Json?
  paymentLink       String?
  paymentLinkExpiry DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id])
  order             Order?        @relation(fields: [orderId], references: [id])
}

model WhatsAppOTP {
  id          String   @id @default(uuid())
  phoneNumber String
  otpCode     String
  verified    Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  email       String?
  isNewUser   Boolean? @default(false)

  @@index([phoneNumber, expiresAt])
}

model OTP {
  id          String   @id @default(uuid())
  phoneNumber String
  otpCode     String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  verified    Boolean  @default(false)

  @@index([phoneNumber])
}

enum ProductCategory {
  MEN
  WOMEN
  KIDS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
